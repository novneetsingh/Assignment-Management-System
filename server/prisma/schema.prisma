generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Professor
}

enum SubmissionStatus {
  Submitted
  Confirmed
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  accountType Role     @default(Student)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignmentsCreated   Assignment[]
  groupsCreated        Group[]
  groupMemberships     GroupMember[]
  assignmentsSubmitted Submission[]
}

model Assignment {
  id           String   @id @default(uuid())
  title        String
  description  String
  dueDate      DateTime
  oneDriveLink String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  submissions Submission[]
}

model Group {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  members     GroupMember[]
  submissions Submission[]
}

model GroupMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  groupId String
  group   Group  @relation(fields: [groupId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Submission {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  status    SubmissionStatus @default(Submitted)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}
